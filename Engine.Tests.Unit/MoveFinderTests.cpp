#include "CppUnitTest.h"
#include "Board.h"
#include "Cell.h"
#include <string>
#include <iostream>
#include "Windows.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace engine;
using namespace std;
namespace Tests {
	TEST_CLASS(MoveFinder) {
	private:
		Board* board;
	public:
		TEST_METHOD_INITIALIZE(CreateBoard) {
			board = Board::CreateBoard(
				"5,3,3,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,5,1,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"5,3,1,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
			);
		}

		TEST_METHOD_CLEANUP(DeleteBoard) {
			delete board;
		}
		TEST_METHOD(MoveFinderIdemPotent){

			Board* invertedBoard = Board::CreateBoard(
				"1,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,1,5,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,5,5,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"1,3,5,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
			);
			Assert::IsTrue(board->GetLegalMoves(Min) == invertedBoard->GetLegalMoves(Max));
			Assert::IsFalse(board->GetLegalMoves(Max) == invertedBoard->GetLegalMoves(Max));
		}

		TEST_METHOD(MTinsertTest) {
			board = Board::CreateBoard(
				"3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,3,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
			);
			Move move = Move(STEP, Vector2D(4,0), Vector2D(5,0), Vector2D(4,3));
			board->ExecuteMove(move, Max);
			string result = board->ToString();
		};
		TEST_METHOD(RulesAmendment) {
			Board* board = Board::CreateBoard(
				"1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,3,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,3,5,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n",
				Vector2D(0, 0));

			std::vector<Move> legalMoves = board->GetLegalMoves(Min);

			Move illegalMove = Move(STEP, Vector2D(0, 0), Vector2D(1, 0), Vector2D(0, 1));

			for (auto it = legalMoves.begin(); it != legalMoves.end(); ++it) {
				Move move = *it;

				Assert::IsFalse(illegalMove == move, L"Found illegal move as specified by rule amendment");
			}

			
			delete board;
		}

		// To check if the board is connected after a move, GetLegalMoves
		// executes a move and then undoes this. This must not create an unvalid
		// board state. This test checks for that.
		TEST_METHOD(IsConnectedDoesNotScrewBoardUp) {
			Board* board = Board::CreateBoard(
				"3,3,1,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,5,1,5,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"5,5,1,3,1,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,1,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
			);
			Move move(JUMP, Vector2D(4, 2), Vector2D(6, 2), Vector2D(4, 0));
			board->ExecuteMove(move, Min);
			string boardAfterMove = board->ToString();
			string expected =
				"3,3,1,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,5,1,5,3,10,10,0,0,0,0,0,0,0,0,0,0,0,0,2,\n"
				"5,5,1,3,11,13,9,10,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,1,5,1,2,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n";
			board->GetLegalMoves(Min);
			string actual = board->ToString();
			Assert::AreEqual(expected, actual);
		}

		TEST_METHOD(DontCreateIslands) {
			Board* board = Board::CreateBoard(
				"3,3,5,3,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"3,7,1,5,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"5,5,1,3,11,13,9,14,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"3,1,5,1,6,14,14,0,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"2,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,2,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				, Vector2D(0, 19)
				);
			std::vector<Move> moves = board->GetLegalMoves(Min);

			Move illegalMove = Move(STEP, Vector2D(2, 0), Vector2D(3, -1), Vector2D(4, 3));

			for (auto it = moves.begin(); it != moves.end(); ++it) {
				Assert::IsFalse(illegalMove == *it, L"Invalid STEP with tile detected");
			}
		}
		
		TEST_METHOD(DontCreateIslands2) {
			Board* board = Board::CreateBoard(
				"1,3,1,1,5,6,0,0,0,0,0,0,0,0,0,0,0,14,14,6,\n"
				"3,15,5,1,3,6,0,0,0,0,0,0,0,0,0,0,14,13,3,15,\n"
				"7,3,1,5,6,0,0,0,0,0,0,0,0,0,0,0,0,14,14,2,\n"
				"1,2,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,2,\n"
				"2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"5,13,14,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,\n"
				, Vector2D(17, 19)
			);
			std::vector<Move> moves = board->GetLegalMoves(Max);

			Move illegalMove = Move(STEP, Vector2D(0, 2), Vector2D(-1, 2), Vector2D(2, 2));

			for (auto it = moves.begin(); it != moves.end(); ++it) {
				Assert::IsFalse(illegalMove == *it, L"Invalid STEP with tile detected");
			}
		}

		TEST_METHOD(RulesAmendment2) {
			Board* board = Board::CreateBoard(
				"7,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"5,1,7,14,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"5,5,13,14,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"5,7,9,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"6,7,14,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"10,11,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"10,9,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"10,11,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"6,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"6,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"2,2,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
			);
			std::vector<Move> moves = board->GetLegalMoves(Max);

			Move illegalMove = Move(JUMP, Vector2D(2, 2), Vector2D(2, 4), Vector2D(3, 3));

			for (auto it = moves.begin(); it != moves.end(); ++it) {
				Assert::IsFalse(illegalMove == *it, L"Invalid JUMP with tile detected");
			}
		}

		TEST_METHOD(MissingJumpMoveBug) {
			Board* board = Board::CreateBoard(
				"6,9,3,10,10,2,2,0,0,0,0,0,0,0,0,0,0,0,2,10,\n"
				"1,15,3,1,6,6,14,0,0,0,0,0,0,0,0,0,0,0,2,14,\n"
				"1,5,7,15,5,6,0,0,0,0,0,0,0,0,0,0,0,0,2,1,\n"
				"6,13,14,6,6,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,\n"
				"6,14,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,6,5,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"6,6,9,11,10,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"6,5,7,10,6,10,2,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				, Vector2D(19, 17)
			);
			std::vector<Move> moves = board->GetLegalMoves(Max);

			Move expectedMove = Move(JUMP, Vector2D(3, 0), Vector2D(3, 2));

			for (auto it = moves.begin(); it != moves.end(); ++it) {
				if (expectedMove == *it)
					return;
			}
			Assert::IsTrue(false, L"Missing Jump move");
		}

		TEST_METHOD(LeftColumnDoesNotMoveGetLegalMovesIsCalled) {
			Board* board = Board::CreateBoard(
				"2,3,5,1,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,\n"
				"1,3,1,5,1,2,0,0,0,0,0,0,0,0,0,0,0,0,2,3,\n"
				"3,3,7,1,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,\n"
				"3,3,5,5,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,2,6,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n"
				"0,6,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n",
				Vector2D(19, 0)
			);
			// GetLegalMoves should not screw the board up.
			board->GetLegalMoves(Max);
			RelativeCell shouldBeEmptyCell = board->GetRelativeCellAt(Vector2D(0, 2));
			Assert::IsFalse(shouldBeEmptyCell.HasTile(),
				L"(0, 2) should be empty, but was not! (possible wrong topleft)");
		}
	};
}
